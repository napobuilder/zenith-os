import React, { useState, useEffect } from 'react';
import { Card, SectionTitle, Modal } from './UI';
import { Clock, Target } from 'lucide-react';

export const SleepCycleCalculator = () => {
    const [wakeUpTimes, setWakeUpTimes] = useState([]);
    const calculateWakeUpTimes = (bedtime) => { const fallAsleepTime = new Date(bedtime.getTime() + 15 * 60000); const times = []; for (let i = 4; i <= 6; i++) { const wakeUpTime = new Date(fallAsleepTime.getTime() + i * 90 * 60000); times.push({ cycles: i, time: wakeUpTime.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }), hours: Math.floor(i*1.5), minutes: (i*1.5 % 1) * 60 }); } setWakeUpTimes(times); };
    useEffect(() => { const defaultBedtime = new Date(); defaultBedtime.setHours(23, 0, 0, 0); calculateWakeUpTimes(defaultBedtime); }, []);
    const handleBedtimeSelection = (hours, minutes) => { const newBedtime = new Date(); newBedtime.setHours(hours, minutes, 0, 0); calculateWakeUpTimes(newBedtime); }
    return (<Card><SectionTitle icon={<Clock />} title="Calculadora de Sueño" /><div className="grid grid-cols-2 sm:grid-cols-4 gap-2 mb-4"><button onClick={() => handleBedtimeSelection(22, 0)} className="bg-white bg-opacity-10 text-white text-sm py-2 rounded-lg hover:bg-white hover:bg-opacity-20 transition-colors">10 PM</button><button onClick={() => handleBedtimeSelection(23, 0)} className="bg-white bg-opacity-10 text-white text-sm py-2 rounded-lg hover:bg-white hover:bg-opacity-20 transition-colors">11 PM</button><button onClick={() => handleBedtimeSelection(0, 0)} className="bg-white bg-opacity-10 text-white text-sm py-2 rounded-lg hover:bg-white hover:bg-opacity-20 transition-colors">12 AM</button><button onClick={() => handleBedtimeSelection(1, 0)} className="bg-white bg-opacity-10 text-white text-sm py-2 rounded-lg hover:bg-white hover:bg-opacity-20 transition-colors">1 AM</button></div><h4 className="font-semibold text-white mb-2">Despierta a una de estas horas</h4><ul className="space-y-2">{wakeUpTimes.map((item, index) => (<li key={index} className={`p-3 rounded-lg flex justify-between items-center ${index === 1 ? 'bg-purple-600 bg-opacity-50 border border-purple-500' : 'bg-white bg-opacity-5'}`}><span className="text-xl font-bold text-white">{item.time}</span><div className="text-right"><span className="font-semibold text-purple-300">{item.cycles} Ciclos</span><p className="text-xs text-gray-400">{item.hours}h {item.minutes}min</p></div></li>))}</ul></Card>);
};

export const PomodoroTimer = () => {
  const [minutes, setMinutes] = useState(25); const [seconds, setSeconds] = useState(0); const [isActive, setIsActive] = useState(false); const [isBreak, setIsBreak] = useState(false); const [showModal, setShowModal] = useState(false); const [modalMessage, setModalMessage] = useState('');
  const CustomAlert = ({ message, onClose }) => (<Modal onClose={onClose}><div className="text-center"><h2 className="text-xl font-bold text-white mb-2">Pomodoro</h2><p className="text-gray-300">{message}</p><button onClick={onClose} className="mt-6 bg-purple-600 text-white font-semibold py-2 px-6 rounded-lg hover:bg-purple-700 transition-colors">OK</button></div></Modal>);
  useEffect(() => { let interval = null; if (isActive) { interval = setInterval(() => { if (seconds > 0) { setSeconds(s => s - 1); } if (seconds === 0) { if (minutes === 0) { clearInterval(interval); setIsActive(false); if (isBreak) { setModalMessage('¡El descanso ha terminado! Volvamos al trabajo.'); setShowModal(true); setMinutes(25); setIsBreak(false); } else { setModalMessage('¡Tiempo de un descanso! Buen trabajo.'); setShowModal(true); setMinutes(5); setIsBreak(true); } } else { setMinutes(m => m - 1); setSeconds(59); } } }, 1000); } return () => clearInterval(interval); }, [isActive, seconds, minutes, isBreak]);
  const toggle = () => setIsActive(!isActive); const reset = () => { setIsActive(false); setIsBreak(false); setMinutes(25); setSeconds(0); };
  return (<Card className="text-center"><SectionTitle icon={<Target />} title="Foco Pomodoro" /><div className="text-7xl font-mono text-white my-4 tracking-tighter">{minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}</div><div className="space-x-4"><button onClick={toggle} className={`px-6 py-2 rounded-lg font-semibold text-white transition-all duration-300 ${isActive ? 'bg-yellow-500 hover:bg-yellow-600' : 'bg-purple-600 hover:bg-purple-700'}`}>{isActive ? 'Pausa' : 'Inicio'}</button><button onClick={reset} className="px-6 py-2 rounded-lg bg-pink-600 hover:bg-pink-700 font-semibold text-white transition-colors">Reset</button></div><p className="text-sm text-purple-300 mt-3">{isBreak ? 'En descanso...' : 'Sesión de trabajo'}</p>{showModal && <CustomAlert message={modalMessage} onClose={() => setShowModal(false)} />}</Card>);
};